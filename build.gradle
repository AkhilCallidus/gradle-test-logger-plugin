buildscript {
    dependencies {
        classpath 'org.fusesource.jansi:jansi:1.18'
    }
}

plugins {
    id 'com.gradle.build-scan' version '2.4.2'
    id 'groovy'
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'idea'
    id 'jacoco'
    id 'com.gradle.plugin-publish' version '0.10.1'
    id 'com.github.kt3k.coveralls' version '2.8.4'
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

def thisPlugin =
    new GroovyScriptEngine(file('src/main/groovy').absolutePath, this.class.classLoader)
        .loadScriptByName('com/adarshr/gradle/testlogger/TestLoggerPlugin.groovy')

apply from: 'gradle/publishing.gradle'
apply from: 'gradle/coverage.gradle'
apply plugin: thisPlugin

repositories {
    mavenCentral()
}

sourceSets {
    functionalTest {
        groovy {
            srcDir 'src/test-functional/groovy'
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output
        }
    }
}

dependencies {
    compile gradleApi()
    compile localGroovy()
    compile 'org.fusesource.jansi:jansi:1.18'

    testCompile gradleTestKit()
    testCompile('org.spockframework:spock-core:1.3-groovy-2.5') {
        exclude module: 'groovy-all'
    }
    testCompile 'net.bytebuddy:byte-buddy:1.10.1'
    testCompile 'org.objenesis:objenesis:3.1'
    testCompile 'commons-io:commons-io:2.6'

    functionalTestCompile localGroovy()
    functionalTestCompile gradleTestKit()
    functionalTestCompile('org.spockframework:spock-core:1.3-groovy-2.5') {
        exclude module: 'groovy-all'
    }
    functionalTestCompile 'commons-io:commons-io:2.6'
}

gradlePlugin {
    plugins {
        testLoggerPlugin {
            id = 'com.adarshr.test-logger'
            implementationClass = 'com.adarshr.gradle.testlogger.TestLoggerPlugin'
        }
    }
}

idea {
    module {
        testSourceDirs += file('src/test-functional/groovy')
    }
}

test {
    testClassesDirs += sourceSets.functionalTest.output.classesDirs
    classpath += sourceSets.functionalTest.runtimeClasspath
    systemProperty 'file.encoding', 'UTF-8'

    testlogger {
        theme 'mocha'
    }

    exclude 'com/adarshr/gradle/testlogger/functional/**'
}

task functionalTest(type: Test) {
    maxParallelForks = 2
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath + sourceSets.functionalTest.runtimeClasspath
    systemProperty 'file.encoding', 'UTF-8'
    minHeapSize '128m'
    maxHeapSize '512m'

    testlogger {
        theme 'mocha-parallel'
    }

    include 'com/adarshr/gradle/testlogger/functional/**'
}

tasks.check.dependsOn 'functionalTest'
tasks.functionalTest.dependsOn 'pluginUnderTestMetadata', 'testClasses'
tasks.functionalTest.mustRunAfter 'test'
